<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MrFine's Blog]]></title>
  <link href="http://MrFine.github.com/atom.xml" rel="self"/>
  <link href="http://MrFine.github.com/"/>
  <updated>2012-03-31T23:30:16+08:00</updated>
  <id>http://MrFine.github.com/</id>
  <author>
    <name><![CDATA[MrFine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The hard way is easier]]></title>
    <link href="http://MrFine.github.com/blog/2012/03/31/the-hard-way-is-easier/"/>
    <updated>2012-03-31T23:23:00+08:00</updated>
    <id>http://MrFine.github.com/blog/2012/03/31/the-hard-way-is-easier</id>
    <content type="html"><![CDATA[<p>学习ruby，从今天开始慢慢翻译Learn ruby in the hard way。翻译质量有待提高，放出第一章先。</p>

<h2>The Hard Way Is Easier</h2>

<p>这本书希望能让你开始领略编程的乐趣。标题说的是这是一种学习码代码的笨方法；而实际上反而更好。说是“hard”的方法，只是因为这是人们用来教学的一种方法。在这本书的帮助下，你将要做一些所有的程序员学习一门语言时都要做的一些特别简单的事情。</p>

<ol>
<li>阅读每一个练习。</li>
<li>认真的键入每一个例子。</li>
<li>让它能运行起来。</li>
</ol>


<p>就是这样。刚开始会非常困难，但是请坚持下去。如果你读完了这本书，并且每天晚上花上一两个小时做每个练习的话，你将会有一个非常好的基础去读另外一本书。</p>

<p>这本书将会教给你三个菜鸟程序员应该知道的基本技能：阅读和写作，关注细节，洞察差异。</p>

<h2>阅读和写作</h2>

<p>这看起来很低级，但是，如果你书写的代码很有问题，你学习编程就会很有问题。特别是当你在源代码里码的代码特别古怪的时候。没有基本读写的技能，你甚至不能学习关于软件是怎么工作的一些最基本的东西。</p>

<p>键入一些代码的例子，让它们运行起来。这会帮助你学习对象的名字，更熟悉的键入，让你学会怎么读这门语言。</p>

<h2>关注细节</h2>

<p>对细节的关注是一个好的程序员和一个差程序员之间的一个很重要的却别。实际上，在任何一个专业都是这样的。不留意工作中的微小的细节，你很可能忘掉你创建的关键元素。在编程中，不关注细节直接导致各种bug，还有很难使用的系统。</p>

<p>通过通读这本书，并且认真的重做每一个例子，你可以训练你做事情时专注的态度。</p>

<h2>洞察差异</h2>

<p>这是一个很重要的技能（大部分的程序员在实践中得到这个技能），它是区别出事物之间差异的一种能力。面对两段有些许不同的程序，一个有经验的程序员可以轻易的指出其中的不同之处。虽然现在有一些工具也能做到这些，但是我们刚开始不要用这些工具。先训练你的大脑，然后再使用这些工具。</p>

<p>当你做这些联系的时候，一个个的键入，错误在所难免。即使是很有经验的程序员也会犯一些错误。你要做的是对照你所写的和应该要写的，找出它们之间的不同。通过这样，你会渐渐的习惯于关注到错误、bug、还有一些其他的问题。</p>

<h2>不要简单的ctrl+c、ctrl+v</h2>

<p>你必须亲自键入每一个练习，如果你只是简单的复制粘贴，你还不如不做。这些练习的目的是训练你的双手、你的大脑、你的思想，从而让你懂得怎么去阅读、书写和查看代码。不要自我欺骗。</p>

<h2>关于练习和坚持的一个小故事</h2>

<p>当你学习编程时，我在学习吉他。我一天弹上至少两个小时。其中至少一个小时用来练习指法、和弦和快速弹奏，然后学习音乐理论、训练听力、歌曲还有一些其他的我能做的。有时候我每天八个小时学习吉他和音乐，因为我喜欢这个，非常有趣。对我来说，重复性的练习是很自然的学习新东西的方法。我知道如果你想精通什么你就得每天不停的练习，尽管经常感到很恶心或者很难。坚持下去，慢慢的它就会变得简单、有趣。</p>

<p>当你学习这本书，继续编程的时候，记着万事开头难。可能你是那种害怕失败的人，所以当刚开始觉得困难的时候你就放弃了。可能你不是一个自律的人，你做不了任何你觉得枯燥的东西。或者你经常被认为是天才，以至于你从来不尝试那些会让你看起来很笨的事情。又或者你很有竞争意识，然后把自己和一个编程了20年的人，比如我，做不公平的比较。</p>

<p>无论是什么原因让你想放弃，坚持下去！强迫自己。当你遇到你不懂或者做不出来的课程时，先跳过它，过一段时间再回头做。坚持下去！因为编程经常出现各种各样奇怪的事情，说不定你回来的时候你就找到答案了。</p>

<p>刚开始你什么都不懂的时候，你会觉得这语言很奇怪，你会觉得在学一门外语。你得纠结于很多单词，不知道那些符号是什么东西，这些会让你很困惑。有一天，你会如醍醐灌顶般贯通这一切。如果你坚持做练习，尝试理解，这一天肯定会到来。你可能不是一个大师级程序员，但是你至少可以知道程序是怎样运作的。</p>

<p>如果你放弃了，你连这都不会知道。你只会持续的困惑，困惑。如果你坚持尝试、坚持码代码、努力理解，你总会精通它的。</p>

<p>但是，如果你通读了正本书，你仍然不理解怎么去编程，至少你尝试了。你仍然可以傲视那些半途放弃的人，至少你尝试了。</p>

<h2>Licence</h2>

<p>这本书的版权属Zed A.Shaw所有。你可以免费的分发给所有人。但是你必须将整本书推荐出去，否则，就不要推荐了。你可以用这本书来授课，但是你不能改变书的内容。</p>
]]></content>
  </entry>
  
</feed>
